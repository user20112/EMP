/**
 * @file XLSDispenser
 * @short contain definition of class \c XLSDispenser::XLSDispenser
 *
 * @remark
 * this file is a template file and could be used to create new GaApp - Modules. Do do so replace all "SkeletonModule" by your module name and add your code to all TODO comments
 *
 * Version Information
 * -------------------
 * $Revision: 29111 $
 * $HeadURL: https://app-aug-svn01.aug.osram.de/svn/aug-sw/TASKS/SOFTWARE/LIBS/CPP/Gamma_IOPlugins/PlugInTemplate/trunk/src/PlugInVersionInfo.template.cpp $
 * $Author: S.Hegemann $
 * $Date: 2014-11-20 11:46:22 +0100 (Do, 20 Nov 2014) $
 *
 */
#ifndef SOURCE_XLSDISPENSER_H_
#define SOURCE_XLSDISPENSER_H_

// System header
#include <string>

// external library header
#include "GaGCppAPI.h"
#include "GaAppBaseLib.h"
#include "UartInterface.h"
#include "mqtt.h"

// standard logger name
#define LOGGER_NAME             "XLSDispenser"
#define GAMMA_BASE_VAR          "XLSDispenser.data"

// length of DMC telegram buffer
#define DMC_TELEGRAM_BUFLEN     32

// length of default DMC telegram (w/o tilde, CR, LF)
#define DMC_TELEGRAM_MIN_LENGTH 10

#define CR                      0x0d
#define LF                      0x0a

typedef struct dmcData
{
    std::string     mqttDefId;                        ///< @short definition ID for the mqtt telegram
    std::string     mqttTopic;                        ///< @short mqtt topic
    std::string     mqttDmcType;                      ///< @short defines the type of the dmc ("Magazin" or "Nutzen")
    std::string     mqttTimeStamp;                    ///< @short timestamp for the mqtt transmission
    unsigned int    pos;                              ///< @short pointer position for DMC telegram 1
    unsigned char   tele[DMC_TELEGRAM_BUFLEN];        ///< @short DMC telegram from interface 1
}dmcData;


// library header

namespace XLSDispenser {

    /**
     * @short TODO: add your module description here
     */
    class XLSDispenser : public GaAppBaseLib::ModuleInterface, public GaGCppAPI::GaTask
    {
        public:
            /**
             * @short constructor
             *
             * @remark
             * don't add more input parameter, because the calling function wouldn't know them!
             *
             * __actual situation__
             *
             * the constructor is called during all modules will be loaded. There is no guarantee witch modules are active now.
             * During the construction the module is only for its own and should not try to connect to other modules.
             *
             * __jobs to do here__
             *  - parse xml configuration and setup this instance
             *  - create and connect to own gamma variables and scheduler slots
             *
             * @param _instanceName name of this instance
             * @param _configInfo pointer to xml configuration node
             */
            XLSDispenser(const char* _instanceName,
                           pugi::xml_node* _configInfo);

            /**
             * @short destructor
             *
             * __actual situation__
             *
             * the application is shutting down and unload all modules.
             *
             * __jobs to do here__
             *  - Clean up your stuff
             */
            ~XLSDispenser();

            /**
             * @short method will be called by application before cycle task will be started
             *
             * __actual situation__
             *
             * all modules are loaded and the gamma middleware contain all needed variables, but the values do not necessarily have to be valid!
             *
             * __jobs to do here__
             *  - browse gamma variables
             *  - connect to other modules
             *
             */
            virtual void prepareStart();

            /**
             * @short method will be called by application after cycle task is stopped
             *
             * __actual situation__
             *
             * all cyclic task and scheduler are stopped. This is the last chance to get values from gamma. During this call no values should be changed anymore.
             *
             * __jobs to do here__
             *  - make needed backups
             *  - disconnect from gamma
             */
            virtual void cleanUp();

            /**
             * @short general command interface
             *
             * the application has a user terminal. Commands can be forwarded to a module by using the syntax [moduleName]:[command] [args...]
             * This function will be called, when a command for this module is given to the terminal.
             *
             * @param _cmdLine command as string including all arguments
             */
            virtual void execCommand(std::string& _cmdLine);


            /**
             * @short Telegram parser for DMC scanner telegrams (start with '~', end with '\r\n').
             * @param buf Pointer to buffer, containing the parsed telegram, terminated with '\0'
             * @param c New char received from serial interface
             * @return None
             */
            int XLSParseTelegram(dmcData* dmc, const unsigned char c);

            /**
             * @short Generate MQTT message and send new DMC to MQTT server
             * @param dmc Pointer to the dmc structure containing the new DMC
             * @param client Pointer to the mqtt client
             * @return None
             */
            void XLSSendMqttMessage(dmcData* dmc, mqtt* mqttclt);

        protected:
            /**
             *
             * @return
             */
            virtual int32_t taskInit() noexcept;

            /**
             *
             * @return
             */
            virtual int32_t taskDeinit() noexcept;

            /**
             *
             * @param taskHandle
             * @param frameNumber
             * @return
             */
            virtual int32_t taskRun(gs_Task taskHandle, const uint32_t* frameNumber) noexcept;

        private:

            bool isMqttConfBad;

            std::string mGammaPathBase;                     ///< @short path base to gamma PV's
            std::string mGammaSlot;                         ///< @short name of gamma scheduler slot

            mqtt* mqttClient;                               ///< @short mqtt client
            std::string mqttMessage;                        ///< @short mqtt message string

            std::string mqttServer;
            std::string mqttDeviceName;

            const std::string mLoggerName = LOGGER_NAME;
            const std::string gammaBaseVar = GAMMA_BASE_VAR;

            UartInterface Uart1, Uart2;
            dmcData dmc1, dmc2;

            // gamma variables
            /*GaGCppAPI::TypedPV<std::string> dmc1Id;
            GaGCppAPI::TypedPV<std::string> dmc2Id;
            GaGCppAPI::TypedPV<std::string> dmc1TimeStamp;
            GaGCppAPI::TypedPV<std::string> dmc2TimeStamp;*/
    };

} /* namespace SkeletonModule */

#endif /* SOURCE_XLSDISPENSER_H_ */

/**
 * @file SharedPV.h
 * @short contain definition of class \c GaGCppAPI::SharedPV
 *
 * Version Information
 * -------------------
 * $Revision: 29111 $
 * $HeadURL: https://app-aug-svn01.aug.osram.de/svn/aug-sw/TASKS/SOFTWARE/LIBS/CPP/Gamma_IOPlugins/PlugInTemplate/trunk/src/PlugInVersionInfo.template.cpp $
 * $Author: S.Hegemann $
 * $Date: 2014-11-20 11:46:22 +0100 (Do, 20 Nov 2014) $
 *
 */
#ifndef CHUCKCOOLING_SOURCE_GAGCPPAPI_INCLUDE_PV_SHAREDPV_H_
#define CHUCKCOOLING_SOURCE_GAGCPPAPI_INCLUDE_PV_SHAREDPV_H_

// System header
#include <memory>
#include <vector>

// external library header

// local library header
#include "pv/RawPV.h"


namespace GaGCppAPI {

    /**
     * @short class \c SharedPV stored a RawPV as shared pointer and forward all default method calls to this instance.
     *
     */
    class SharedPV
    {
        public:
            /**
             * @short create new instance for a gamma process variable, but will not connect
             *
             * @warning
             * call \c connectToPv() before access to this PV
             */
            SharedPV();

            /**
             * @short connect to existing gamma process variable by alias name
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * further description, how the alias name is defined see gamma API reference.
             *
             * @param _alias PV alias name
             * @param _pvProperty connection properties.
             */
            SharedPV(const char* const _alias,
                  gc_Flags32Bit _pvProperty);

            /**
             * @short connect to existing gamma process variable by alias name and array index
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * further description, how the alias name and index is defined see gamma API reference.
             *
             * @param _alias PV alias name
             * @param _index index of PV
             * @param _pvProperty connection properties.
             */
            SharedPV(const char* const _alias,
                  uint32_t _index,
                  gc_Flags32Bit _pvProperty);

            /**
             * @short connect to existing gamma process variable by numeric address.
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * the numeric address need to be generated by searching functions and should not be defined fixed!
             * See the browsing API how to search for PV's
             *
             * @param _address PV numeric address
             * @param _pvProperty connection properties.
             */
            SharedPV(const gc_Level6Address* _address,
                  gc_Flags32Bit _pvProperty);

            /**
             * @short clean up when gamma process variable isn't in use anymore.
             */
            virtual
            ~SharedPV();

            /**
             * @short connect to existing gamma process variable by alias name
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * further description, how the alias name is defined see gamma API reference.
             *
             * @param _alias PV alias name
             * @param _pvProperty connection properties.
             */
            virtual void
            connectToPv(const char* const _alias,
                        gc_Flags32Bit _pvProperty);

            /**
             * @short connect to existing gamma process variable by alias name and array index
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * further description, how the alias name and index is defined see gamma API reference.
             *
             * @param _alias PV alias name
             * @param _index index of PV
             * @param _pvProperty connection properties.
             */
            virtual  void
            connectToPv(const char* const _alias,
                        uint32_t _index,
                        gc_Flags32Bit _pvProperty);

            /**
             * @short connect to existing gamma process variable by numeric address.
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * the numeric address need to be generated by searching functions and should not be defined fixed!
             * See the browsing API how to search for PV's
             *
             * @param _address PV numeric address
             * @param _pvProperty connection properties.
             */
            virtual void
            connectToPv(const gc_Level6Address* _address,
                    gc_Flags32Bit _pvProperty);

            /**
             * @short get PV name
             * @return name of PV
             */
            std::string
            getName() const;

            /**
             * @short request the data type, defined by gamma service
             * @return the data type of the connected PV
             */
            gc_DataType
            getDataType() const;

            /**
             * @short find out whether PV is a numeric value
             * @return true, when PV has a numeric data type, otherwise false
             */
            bool
            isNumericValue () const;

            /**
             * @short find out whether PV has a binary data type
             * @return true, when PV has a binary data type, otherwise false
             */
            bool
            isBinaryData () const;

            /**
             * @short find out whether PV is a fifo
             * @return true, when PV is a fifo, otherwise false
             */
            bool
            isFifo () const;

            /**
             * @short get the maximal usable data storage size in bytes (only for binary data types)
             * @return size of buffer [bytes]
             */
            virtual size_t
            getBinarySize() const;

            /**
             * @short get the used data storage size in bytes (only for binary data types)
             * @return used size of buffer [bytes]
             */
            virtual size_t
            getUsedBuffer() const;

            /**
             * @short request the numeric address of PV.
             * @return numeric address
             */
            gc_Level6Address
            getAddress () const;

            /**
             * @short request the numeric address and alias name of PV.
             * @param conformAddress [OUT] alias name
             * @return numeric address
             */
            gc_Level6Address
            getAddress (std::string& conformAddress) const;

            /**
             * @short request the current value (only for value types)
             *
             * @warning
             * this method returns a union. The Value need to be interpreted depending on the data type!
             *
             * @return current numeric value
             */
            virtual gc_NumericValue
            getNumericValue() const;

            /**
             * @short request the current buffer content (only for binary data types)
             * @return copy of the current buffer content
             */
            virtual std::vector<uint8_t>
            getBinaryValue() const;

            /**
             * @short request the current value as formated string
             *
             * @warning
             * when a format string is set, it is important to take care for the data type
             *
             * @param _format format string as defined for \c printf
             * @return value as string
             */
            virtual std::string
            getValueAsString(const char* _format = nullptr) const;

            /**
             * @short put a new value to PV (only for value types)
             *
             * @warning
             * _value is an union and will be interpreted depending on the data type!
             *
             * @param _value new PV value
             */
            virtual void
            putNumericValue(const gc_NumericValue& _value);

            /**
             * @short copy the given vector to the PV buffer
             * @param _value new buffer content
             */
            virtual void
            putBinaryValue(const std::vector<uint8_t>& _value);

            /**
             * @short parse given string and put the result to PV
             * @param _value string to parse
             * @param _base Numerical base (radix) (for interger data types only).
             */
            virtual void
            putValueFromString(const std::string _value, int _base = 10);

            /**
             * @short get a list of all PV properties
             * @return list of property names
             */
            std::vector<std::string>
            getPropertyList();

            /**
             * @short get the value of given property
             * @param _propertyName name of property to search for
             * @return current property value
             */
            std::string
            getProperty(std::string _propertyName);

            /**
             * @short check if PV has a property with given Name
             * @param _propertyName
             * @return
             */
            bool
            hasProperty(std::string _propertyName);

        private:
            std::shared_ptr<RawPV>  mPV;
    };

} /* namespace GaGCppAPI */

#endif /* CHUCKCOOLING_SOURCE_GAGCPPAPI_INCLUDE_PV_SHAREDPV_H_ */

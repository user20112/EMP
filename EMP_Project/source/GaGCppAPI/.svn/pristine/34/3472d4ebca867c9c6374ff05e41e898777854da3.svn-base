/*
 * RawPV.h
 *
 *  Created on: 05.12.2014
 *      Author: s.hegemann
 */

#ifndef SOURCE_GAGCPPAPI_INCLUDE_PV_RAWPV_H_
#define SOURCE_GAGCPPAPI_INCLUDE_PV_RAWPV_H_

#include <vector>

#include <gaapi/pv.h>

#include "exceptions/GammaFaultException.h"
#include "exceptions/LogicFaultException.h"
#include "exceptions/ArgumentFaultException.h"

#include "common/EventHandler.h"

namespace GaGCppAPI {

    enum class eventType {
            SERVICE_ATTACHED,
            SERVICE_DETACHED,
            SERVICE_LOST
    };

    /**
     * @short class \c RawPV implements the Gamma API interface for process variables (PV).
     *
     * when a new instance is created, \c RawPV connects to gamma service and attach to the specified process variable.
     * Each access to the data is forwarded to gamma service. Only some settings are buffered local.
     * The connection to gamma service will be destroyed, when the instance is terminated.
     *
     * @remark
     * for numeric value use \c TypedPV instead this implementation.
     */
    class RawPV : public EventHandler
    {
        public:
            /**
             * @short connect to existing gamma process variable by alias name
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * further description, how the alias name is defined see gamma API reference.
             *
             * @param _alias PV alias name
             * @param _pvProperty connection properties.
             */
            RawPV(const char* const _alias,
                  gc_Flags32Bit _pvProperty);

            /**
             * @short connect to existing gamma process variable by alias name and array index
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * further description, how the alias name and index is defined see gamma API reference.
             *
             * @param _alias PV alias name
             * @param _index index of PV
             * @param _pvProperty connection properties.
             */
            RawPV(const char* const _alias,
                  uint32_t _index,
                  gc_Flags32Bit _pvProperty);

            /**
             * @short connect to existing gamma process variable by numeric address.
             *
             * @remark
             * default connection properties:
             *     | location | property, that should be used   |
             *     |----------|---------------------------------|
             *     | local    | ga_PV_PROPERTY_ACC_NON_BLOCKING |
             *     | remote   | ga_PV_PROPERTY_ACC_BLOCKING     |
             *
             * @remark
             * the numeric address need to be generated by searching functions and should not be defined fixed!
             * See the browsing API how to search for PV's
             *
             * @param _address PV numeric address
             * @param _pvProperty connection properties.
             */
            RawPV(const gc_Level6Address* _address,
                  gc_Flags32Bit _pvProperty);

            /**
             * @short clean up when gamma process variable isn't in use anymore.
             */
            virtual
            ~RawPV();

            /**
             * @short tries to attach to gamma service, when connection is lost.
             *
             * It is important to reconnect to gamma service, when the connection was lost. The internal
             * handler are not valid after a broken connection.
             */
            void
            reconnect ();

            /**
             * @short request the data type, defined by gamma service
             * @return the data type of the connected PV
             */
            gc_DataType
            getDataType() const;

            /**
             * @short find out whether PV is a numeric value
             * @return true, when PV has a numeric data type, otherwise false
             */
            bool
            isNumericValue () const;

            /**
             * @short find out whether PV has a binary data type
             * @return true, when PV has a binary data type, otherwise false
             */
            bool
            isBinaryData () const;

            /**
             * @short find out whether PV is a fifo
             * @return true, when PV is a fifo, otherwise false
             */
            bool
            isFifo () const;

            /**
             * @short get the maximal usable data storage size in bytes (only for binary data types)
             * @return size of buffer [bytes]
             */
            virtual size_t
            getBinarySize() const;

            /**
             * @short get the used data storage size in bytes (only for binary data types)
             * @return used size of buffer [bytes]
             */
            virtual size_t
            getUsedBuffer() const;

            /**
             * @short request the numeric address of PV.
             * @return numeric address
             */
            gc_Level6Address
            getAddress () const;

            /**
             * @short request the numeric address and alias name of PV.
             * @param conformAddress [OUT] alias name
             * @return numeric address
             */
            gc_Level6Address
            getAddress (std::string& conformAddress) const;

            /**
             * @short request the current value (only for value types)
             *
             * @warning
             * this method returns a union. The Value need to be interpreted depending on the data type!
             *
             * @return current numeric value
             */
            virtual gc_NumericValue
            getNumericValue() const;

            /**
             * @short request the current buffer content (only for binary data types)
             * @return copy of the current buffer content
             */
            virtual std::vector<uint8_t>
            getBinaryValue() const;

            /**
             * @short put a new value to PV (only for value types)
             *
             * @warning
             * _value is an union and will be interpreted depending on the data type!
             *
             * @param _value new PV value
             */
            virtual void
            putNumericValue(const gc_NumericValue& _value);

            /**
             * @short copy the given vector to the PV buffer
             * @param _value new buffer content
             */
            virtual void
            putBinaryValue(const std::vector<uint8_t>& _value);

            /**
             * @short event callback function. will be called, when a event is fired.
             * @param _arg1 local argument. is set by attach command
             * @param _arg2 event argument. is set by fire comamnd.
             */
            virtual void
            callBack(uint32_t _arg1, uint32_t _arg2);


        private:
            /**
             * @short copy constructor: this is not implemented, because the connection to gamma service isn't allowed to be copied
             * @param _other
             */
            RawPV(const RawPV& _other) = delete;

            /**
             * @short (assignment operator) this is not implemented, because the connection to gamma service isn't allowed to be copied
             * @param _other
             * @return none
             */
            RawPV& operator=(const RawPV& _other) = delete;

            /**
             * @short first call initialization before the PV is open
             */
            void
            prepareOpen ();

            /**
             * @short get some PV settings and prepare instance for dealing with the PV.
             * @param _pvProperty property used for open.
             * @param _attachEvents when set, the PV will attached to gamma service events.
             */
            void
            finalizeOpen(gc_Flags32Bit _pvProperty, bool _attachEvents = true);

            /**
             * @short handle for gamma service connection
             */
            ga_PV mPV;

            /**
             * @short is true, when connection to gamma service is OK, otherwise false
             */
            mutable bool mIsConnected;

            /**
             * @short alias name of connected PV
             */
            std::string mPvName;

            /**
             * @short current numeric address of connected PV
             * @warning
             * this information can be invalid, when connection to gamma service is lost!
             */
            gc_Level6Address mPvAddress;

            /**
             * @short used access property. needed for reconnection
             */
            gc_Flags32Bit mPvProperty;

            /**
             * @short defined data type of connected PV
             */
            gc_DataType mDataType;

            /**
             * @short data flow type (single value or FIFO)
             */
            ga_PVType mPVType;

            /**
             * @short internal interpretation: value is a numeric value
             */
            bool mIsNumericValue;

            /**
             * @short internal interpretation: value is a fifo
             */
            bool mIsFifo;
    };

} /* namespace GaGCppAPI */

#endif /* SOURCE_GAGCPPAPI_INCLUDE_PV_RAWPV_H_ */
